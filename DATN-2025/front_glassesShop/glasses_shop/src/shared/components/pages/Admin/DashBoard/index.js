import { Container, Row, Col, Nav, Tab, Modal, Table, Button, Form } from "react-bootstrap";
import { useState, useEffect } from "react";
import { getUser, deleteUser, getOrder, updateOrder } from "../../../../services/Api";

const DashBoard = () => {
  const [activeKey, setActiveKey] = useState("dashboard");
  const [users, setUsers] = useState([]);
  const [orders, setOrders] = useState([]);
  const [showOrderModal, setShowOrderModal] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);
  // L·∫•y danh s√°ch user & order khi load trang
  useEffect(() => {
    fetchUsers();
    fetchOrders();
  }, []);

  const fetchUsers = () => {
    getUser({ limit: 20 })
      .then(({ data }) => setUsers(data.data.docs))
      .catch((error) => console.log(error));
  };

  const fetchOrders = () => {
    getOrder()
      .then(({ data }) => setOrders(data.data))
      .catch((error) => console.log(error));
  };

  // X√≥a user
  const handleDeleteUser = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?")) {
      try {
        await deleteUser(id);
        alert("X√≥a th√†nh c√¥ng!");
        fetchUsers();
      } catch (error) {
        console.error("L·ªói khi x√≥a user:", error);
        alert("Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng!");
      }
    }
  };

  // M·ªü modal ƒë∆°n h√†ng
  const handleOpenOrder = (order) => {
    setSelectedOrder(order);
    setShowOrderModal(true);
  };

  // C·∫≠p nh·∫≠t ƒë∆°n h√†ng (demo)
  const handleUpdateOrder = async (order) => {
    if (!order) return;
    try {
      await updateOrder(order._id, { status: order.status });
      alert("C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng!");
      fetchOrders(); // load l·∫°i danh s√°ch order
      setShowOrderModal(false);
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng!");
    }
  };

  return (
    <Container fluid>
      <Row>
        {/* Sidebar */}
        <Col md={2} className="bg-dark text-white min-vh-100 p-3">
          <h4 className="mb-4">Admin Panel</h4>
          <Nav
            variant="pills"
            className="flex-column"
            activeKey={activeKey}
            onSelect={(k) => setActiveKey(k)}
          >
            <Nav.Item>
              <Nav.Link eventKey="dashboard" className="text-white">
                Th·ªëng k√™
              </Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="users" className="text-white">
                Ng∆∞·ªùi d√πng
              </Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="products" className="text-white">
                S·∫£n ph·∫©m
              </Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="orders" className="text-white">
                ƒê∆°n h√†ng
              </Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="category" className="text-white">
                Danh m·ª•c
              </Nav.Link>
            </Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="logout" className="text-white">
                ƒêƒÉng xu·∫•t
              </Nav.Link>
            </Nav.Item>
          </Nav>
        </Col>

        {/* N·ªôi dung ch√≠nh */}
        <Col md={10} className="p-4">
          <Tab.Container activeKey={activeKey}>
            <Tab.Content>
              {/* Dashboard */}
              <Tab.Pane eventKey="dashboard">
                <h2>üìä Th·ªëng k√™</h2>
                <p>Hi·ªÉn th·ªã doanh thu, s·ªë ƒë∆°n h√†ng, ng∆∞·ªùi d√πng...</p>
              </Tab.Pane>

              {/* Users */}
              <Tab.Pane eventKey="users">
                <h2>üë§ Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h2>
                <table className="table table-striped">
                  <thead>
                    <tr>
                      <th>H·ªç T√™n</th>
                      <th>Email</th>
                      <th>Vai tr√≤</th>
                      <th>Thao t√°c</th>
                    </tr>
                  </thead>
                  <tbody>
                    {users.map((item, index) => (
                      <tr key={index}>
                        <td>{item.name}</td>
                        <td>{item.email}</td>
                        <td>{item.role}</td>
                        <td>
                          <button
                            onClick={() => handleDeleteUser(item._id)}
                            className="btn btn-sm btn-danger"
                          >
                            X√≥a
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </Tab.Pane>

              {/* Products */}
              <Tab.Pane eventKey="products">
                <h2>üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m</h2>
                <table className="table table-striped">
                  <thead>
                    <tr>
                      <th>T√™n s·∫£n ph·∫©m</th>
                      <th>Gi√°</th>
                      <th>Danh m·ª•c</th>
                      <th>Thao t√°c</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>K√≠nh th·ªùi trang</td>
                      <td>500,000 VND</td>
                      <td>K√≠nh nam</td>
                      <td>
                        <button className="btn btn-sm btn-warning me-2">S·ª≠a</button>
                        <button className="btn btn-sm btn-danger">X√≥a</button>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </Tab.Pane>

              {/* Orders */}
              <Tab.Pane eventKey="orders">
                <h2>üßæ Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>
                <table className="table table-striped">
                  <thead>
                    <tr>
                      <th>M√£ ƒë∆°n h√†ng</th>
                      <th>T·ªïng ti·ªÅn</th>
                      <th>Tr·∫°ng th√°i</th>
                      <th>Thao t√°c</th>
                    </tr>
                  </thead>
                  <tbody>
                    {orders.map((item, index) => (
                      <tr key={index}>
                        <td>{item._id}</td>
                        <td>{(item.total_amount).toLocaleString()}ƒë</td>
                        <td>{item.status}</td>
                        <td>
                          <button
                            onClick={() => handleOpenOrder(item)}
                            className="btn btn-sm btn-danger"
                          >
                            S·ª≠a
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </Tab.Pane>

              {/* Category */}
              <Tab.Pane eventKey="category">
                <h2>üìÇ Qu·∫£n l√Ω danh m·ª•c</h2>
                <table className="table table-striped">
                  <thead>
                    <tr>
                      <th>T√™n danh m·ª•c</th>
                      <th>M√¥ t·∫£</th>
                      <th>Thao t√°c</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>K√≠nh nam</td>
                      <td>C√°c lo·∫°i k√≠nh d√†nh cho nam</td>
                      <td>
                        <button className="btn btn-sm btn-warning me-2">S·ª≠a</button>
                        <button className="btn btn-sm btn-danger">X√≥a</button>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </Tab.Pane>
            </Tab.Content>
          </Tab.Container>
        </Col>
      </Row>

      {/* Modal ƒë∆°n h√†ng */}
      {/* Modal ƒë∆°n h√†ng */}
      <Modal show={showOrderModal} onHide={() => setShowOrderModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>Chi ti·∫øt ƒë∆°n h√†ng</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {orders
            .filter((o) => o._id === selectedOrder?._id)
            .map((order) => (
              <Table bordered hover key={order._id}>
                <tbody>
                  <tr>
                    <th>M√£ ƒë∆°n</th>
                    <td>{order._id}</td>
                  </tr>
                  <tr>
                    <th>T·ªïng ti·ªÅn</th>
                    <td>{order.total_amount?.toLocaleString()} ƒë</td>
                  </tr>
                  <tr>
                    <th>Tr·∫°ng th√°i</th>
                    <td>
                      <Form.Select
                        value={order.status}
                        onChange={(e) =>
                          setSelectedOrder({ ...order, status: e.target.value })
                        }
                      >
                        <option value="pending">Pending</option>
                        <option value="confirmed">Confirmed</option>
                        <option value="shipped">Shipped</option>
                        <option value="delivered">Delivered</option>
                        <option value="cancelled">Cancelled</option>
                      </Form.Select>
                    </td>
                  </tr>
                  <tr>
                    <th>Ng√†y t·∫°o</th>
                    <td>{new Date(order.createdAt).toLocaleString()}</td>
                  </tr>
                </tbody>
              </Table>
            ))}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowOrderModal(false)}>
            ƒê√≥ng
          </Button>
          <Button variant="primary" onClick={() => handleUpdateOrder(selectedOrder)}>
            C·∫≠p nh·∫≠t
          </Button>
        </Modal.Footer>
      </Modal>

    </Container>
  );
};

export default DashBoard;
